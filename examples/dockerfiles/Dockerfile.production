# examples/dockerfiles/Dockerfile.production
# Production-grade Dockerfile with security best practices

# Stage 1: Security scanner
FROM aquasec/trivy:latest AS scanner
COPY requirements.txt /scan/
RUN trivy fs --no-progress --security-checks vuln /scan/requirements.txt

# Stage 2: Build environment
FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04 AS builder

# Install security updates
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    python3.10 \
    python3.10-dev \
    python3-pip \
    build-essential \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install dumb-init for proper signal handling
RUN apt-get update && apt-get install -y dumb-init && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python3 -m pip install --upgrade pip
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install requirements
WORKDIR /build
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Stage 3: Runtime environment
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

# Copy dumb-init from builder
COPY --from=builder /usr/bin/dumb-init /usr/bin/dumb-init

# Install security updates and minimal runtime dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    python3.10 \
    curl \
    ca-certificates \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set up environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    PYTHONPATH=/app \
    PORT=8080

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Create non-root user with specific UID
RUN groupadd -g 1000 mluser && \
    useradd -r -u 1000 -g mluser mluser && \
    mkdir -p /app /home/mluser && \
    chown -R mluser:mluser /app /home/mluser

WORKDIR /app

# Copy application with correct ownership
COPY --chown=mluser:mluser . .

# Remove unnecessary files
RUN find . -type f -name "*.pyc" -delete && \
    find . -type d -name "__pycache__" -delete && \
    rm -rf .git .github .pytest_cache .coverage

# Set security options
USER mluser

# Use non-privileged port
EXPOSE 8080

# Add metadata
LABEL maintainer="your-email@example.com" \
      version="1.0.0" \
      description="Production ML Model Service"

# Health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Run with reduced privileges
CMD ["python", "-m", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "1"]
